# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NrcTHbLPtKsmfcs3fvE_XmMzvLAExUu1

importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection & Analysis"""

#loading the data from csv file to a panda dataframe
customer_data = pd.read_csv('/content/Mall_Customers.csv')

#first 5 rows in the dataframe
customer_data.head()

# finding the number of rows and columns
customer_data.shape

# getting some information about the dataset
customer_data.info()

#checking foe missing values
customer_data.isnull().sum()

"""Choosing the annual income column and spending score column"""

X = customer_data.iloc[:,[3,4]].values

print(X)

"""Choosing the number of clusters

WCSS -> Within Clusters sum of squares
"""

# finding WCSS value for different number of clusters

wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

#plot an elbow graph

sns.set()
plt.plot(range(1,11),wcss)
plt.title('The elbow Point graph')
plt.xlabel('Number of CLusters')
plt.ylabel('WCSS')
plt.show()

"""Optimum number of clusters = 5

TRaining the k-means clustering model (unsupervised learning
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their clusters

Y = kmeans.fit_predict(X)
print(Y)

"""5 clusters - 0,1,2,3,4

Visualizing all the clusters
"""

# plotting all the clusters and their centroids 

  plt.figure(figsize=(8,8))
  plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
  plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
  plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='Cluster 3')
  plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='blue', label='Cluster 4')
  plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='orange', label='Cluster 5')

  # plot the centroids 
  plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=100, c='black', label = 'Centroids')

  plt.title('Customer Groups')
  plt.xlabel('Annual Income')
  plt.ylabel('Spending Score')
  plt.show()

